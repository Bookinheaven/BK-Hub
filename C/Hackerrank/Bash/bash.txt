/* https://guide.bash.academy/ & ChatGPT */
Bash

    which stands for "Bourne Again Shell," is a command-line shell and scripting language used primarily in Unix-based operating systems like Linux. 
    It's a powerful tool for interacting with the system, executing commands, and automating tasks through scripts.

Shell:

    Interactive Command Line: 
        Bash provides a command-line interface where users can type commands to perform various tasks.

    Environment Variables: 
        Bash allows the use and manipulation of environment variables, which store information used by the operating system or applications.

Bash Scripting:

    Scripts: 
        Bash scripting involves creating text files (scripts) containing commands that Bash can execute sequentially.

    Shebang: 
        Scripts typically start with a shebang (#!/bin/bash) that tells the system which interpreter to use for running the script (in this case, Bash).

    Variables: 
        Variables store data, and they can be used in scripts for different purposes like storing values, manipulating strings, or holding command outputs.

    Control Structures: 
        Bash supports conditional statements (if-else), loops (for, while), and functions to control the flow of the script.

    File Operations: 
        Bash enables file manipulation tasks like reading, writing, renaming, and deleting files.

    Command Execution: 
        You can execute system commands within a Bash script using backticks or $() to capture their output.

Common Use Cases:

    Automation: 
        Bash scripts automate repetitive tasks, such as file backups, data processing, or system maintenance.

    System Administration: 
        It's widely used in system administration tasks for managing configurations, installations, and monitoring.

    Custom Tools: 
        Bash scripts can be used to create custom tools or utilities tailored to specific needs.

Best Practices:

    Comments: 
        Use comments to explain complex sections or provide context within scripts.

    Error Handling: 
        Implement error handling to make scripts robust and prevent unexpected behavior.

    Code Organization: 
        Structure your code logically for readability and maintainability.

    Security: 
        Be cautious with user inputs and avoid using variables that haven't been sanitized.

Advanced Features:

    Regular Expressions: 
        Bash supports pattern matching and regex for string manipulation.

        Arrays: 
            Bash includes support for arrays to store multiple values.

        Job Control: 
            It allows running commands in the background (&) or managing multiple processes.

===-------------------------------=========================--------------------------------------------==============================

Basics of Bash:

    Command Line Interface (CLI): 
        Understand how to navigate the command line, execute basic commands (ls, cd, mkdir, etc.), and use man pages for command reference.

    Environment Variables: 
        Learn about system-defined and user-defined environment variables ($PATH, $HOME, etc.).

Bash Scripting Fundamentals:

    Script Creation: Start by creating and executing simple scripts using a text editor like nano, vim, or emacs.
        Shebang Line: 
            Begin scripts with #!/bin/bash to define the interpreter.

    Variables and Data Types: 
        Understand different types of variables (string, integer, array) and their usage.

    Quoting: 
        Learn about single quotes, double quotes, and backticks for proper string handling and command substitution.

    Input/Output: 
        Learn how to take user input (read) and display output (echo, printf).

Control Flow and Decision Making:

    Conditionals: 
        Master if-else statements for decision-making based on conditions.

    Comparison Operators: 
        Learn about operators like -eq, -ne, -lt, -gt for numerical comparisons and =, !=, <, > for string comparisons.

    Logical Operators: 
        Understand &&, ||, and ! for logical operations.

Looping and Iteration:
    for Loop: 
        Use for loops for iterating over lists of items or ranges.
        
    while Loop: 
        Learn how to use while loops for iterative tasks based on conditions.

Functions and Modularity:

    Function Declaration: 
        Create reusable code blocks using functions.
    Scope: 
        Understand variable scope within functions and the main script.
    Return Values: 
        Learn how functions can return values.

File Operations and Text Processing:

    File Manipulation: 
        Master commands like cat, grep, awk, sed for file handling and text processing.

    I/O Redirection: 
        Understand redirection operators (>, >>, <, |) for input/output handling.

Error Handling and Debugging:

    Exit Codes:
        Learn about exit codes and their significance in scripts.

    Error Handling: 
        Implement error handling using trap or conditional statements.

Advanced Bash Scripting:

    Regular Expressions: 
        Explore regex patterns for string manipulation and pattern matching.

    Arrays: 
        Understand arrays and their usage in storing multiple values.
        
    Job Control: 
        Learn about managing background processes and jobs (&, fg, bg).